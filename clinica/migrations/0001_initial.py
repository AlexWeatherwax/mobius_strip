# Generated by Django 5.2.6 on 2025-09-25 12:56

import clinica.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MentalState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(-3), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень ментального состояния')),
                ('description', models.TextField(blank=True, verbose_name='Описание состояния')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('full_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('nickname', models.CharField(max_length=64, unique=True, verbose_name='Никнейм')),
                ('telegram', models.CharField(blank=True, max_length=64, verbose_name='Контакт Telegram')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=clinica.models.avatar_upload_to, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])], verbose_name='Аватар')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'permissions': [('can_edit_patients', 'Может редактировать данные пациентов')],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('full_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('nickname', models.CharField(max_length=64, unique=True, verbose_name='Никнейм')),
                ('telegram', models.CharField(blank=True, max_length=64, verbose_name='Контакт Telegram')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=clinica.models.avatar_upload_to, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])], verbose_name='Аватар')),
                ('chemistry_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень химии')),
                ('mechanics_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень механики')),
                ('social_skills_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень социальных навыков')),
                ('physical_skills_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень физических навыков')),
                ('bonus_level', models.TextField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Уровень физических навыков')),
                ('mental_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='clinica.mentalstate', verbose_name='Текущее ментальное состояние')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NightmareMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('property_1', models.CharField(max_length=255, verbose_name='Свойство 1')),
                ('property_2', models.CharField(max_length=255, verbose_name='Свойство 2')),
                ('property_3', models.CharField(max_length=255, verbose_name='Свойство 3')),
                ('property_4', models.CharField(max_length=255, verbose_name='Свойство 4')),
                ('extra_property_1', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство 1')),
                ('extra_property_2', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство 2')),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='nightmare_map', to='clinica.patient', verbose_name='Пациент')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MechanicalCompound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('author_object_id', models.PositiveIntegerField(verbose_name='ID автора')),
                ('property_1', models.CharField(max_length=255, verbose_name='Свойство 1')),
                ('property_2', models.CharField(max_length=255, verbose_name='Свойство 2')),
                ('property_3', models.CharField(max_length=255, verbose_name='Свойство 3')),
                ('duration', models.DurationField(verbose_name='Время действия')),
                ('extra_property', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство')),
                ('author_content_type', models.ForeignKey(limit_choices_to={'app_label': 'clinica', 'model__in': ('patient', 'doctor')}, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype', verbose_name='Тип автора')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='clinica.patient', verbose_name='Пациент-владелец')),
            ],
            options={
                'verbose_name': 'Механическое соединение',
                'verbose_name_plural': 'Механические соединения',
            },
        ),
        migrations.CreateModel(
            name='ChemicalRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('author_object_id', models.PositiveIntegerField(verbose_name='ID автора')),
                ('property_1', models.CharField(max_length=255, verbose_name='Свойство 1')),
                ('property_2', models.CharField(max_length=255, verbose_name='Свойство 2')),
                ('property_3', models.CharField(max_length=255, verbose_name='Свойство 3')),
                ('duration', models.DurationField(verbose_name='Время действия')),
                ('extra_property', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство')),
                ('author_content_type', models.ForeignKey(limit_choices_to={'app_label': 'clinica', 'model__in': ('patient', 'doctor')}, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype', verbose_name='Тип автора')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='clinica.patient', verbose_name='Пациент-владелец')),
            ],
            options={
                'verbose_name': 'Химический рецепт',
                'verbose_name_plural': 'Химические рецепты',
            },
        ),
        migrations.CreateModel(
            name='AwarenessMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('property_1', models.CharField(max_length=255, verbose_name='Свойство 1')),
                ('property_2', models.CharField(max_length=255, verbose_name='Свойство 2')),
                ('property_3', models.CharField(max_length=255, verbose_name='Свойство 3')),
                ('property_4', models.CharField(max_length=255, verbose_name='Свойство 4')),
                ('extra_property_1', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство 1')),
                ('extra_property_2', models.CharField(blank=True, max_length=255, verbose_name='Доп. свойство 2')),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='awareness_map', to='clinica.patient', verbose_name='Пациент')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
